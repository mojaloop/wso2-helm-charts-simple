{{- $wso2AppHome := printf "%s/%s-%s" .Values.wso2Home .Values.productName .Values.productVersion -}}
{{- $wso2DockerRepo := printf "%s/%s-%s" .Values.image.repositoryPath .Values.image.dockerImageName .Values.productVersion -}}
{{- $releaseName := .Release.Name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "self.fullname" . }}
  labels: 
{{ include "self.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "self.fullname" . }}
      release: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  progressDeadlineSeconds: {{ .Values.progressDeadlineSeconds }}
  template:
    metadata:
      labels:
{{ include "self.labels" . | indent 8 }}      
      annotations:  
        checksum-confmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | trunc 63 }}        
    spec:
      {{- if .Values.copyExtHostToEtcHosts.enabled }} 
      hostAliases:
      - ip: "0.0.0.0"
        hostnames:
        - {{ .Values.copyExtHostToEtcHosts.extHostName }}
      {{- end }}
      containers:
        - name: {{ template "self.fullname" . }}
          image: {{ $wso2DockerRepo }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.persistentVolume.pvcEnabled }}
          securityContext:
            runAsUser: {{ .Values.persistentVolume.fsowner.userid }} 
            runAsGroup: {{ .Values.persistentVolume.fsowner.groupid }}
            fsGroup: {{ .Values.persistentVolume.fsowner.groupid }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.wso2.targetPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.wso2.targetPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command:  ['sh', '-c', '${WSO2_SERVER_HOME}/bin/wso2server.sh stop']
          ports:
          {{- range $port := .Values.service.ports }}
          {{- if $port.enabled }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              sourcePort: {{ $port.internalPort }}
          {{- end }}
          {{- end }}
          envFrom:
          - configMapRef:
              name: {{ template "self.fullname" . }}
          volumeMounts:
          {{- if .Values.persistentVolume.pvcEnabled }}
          - name: {{ template "self.fullname" . }}-storage-volume
            mountPath: {{ $wso2AppHome }}/{{ .Values.persistentVolume.mountToSubPath }}
            {{- if .Values.persistentVolume.subPathEnabled }}
            subPath: {{ .Values.persistentVolume.subPath }}
            {{- end }}
          {{- end }}
          {{- if .Values.configmap.externalConfigMapVolMountEnabled }}
          - name: {{ template "self.fullname" . }}-config-volume
            readOnly: true
            mountPath: "{{ .Values.configmap.wso2amConfigVolPath }}"
          {{- end }}
          {{- if .Values.secret.externalSecretVolMountEnabled }}
          - name: {{ template "self.fullname" . }}-secret-volume
            readOnly: true
            mountPath: "{{ .Values.secret.wso2amSecretVolPath }}"
          {{- end }}
          {{- if .Values.binconfigmap.externalConfigMapVolMountEnabled }}
          - name: {{ template "self.fullname" . }}-bin-volume
            readOnly: true
            mountPath: "{{ $wso2AppHome }}/bin/copyConfigs.sh"
            subPath: "copyConfigs.sh"
          {{- end }}         
      {{- if .Values.rbac.enabled }}      
      serviceAccountName: {{ template "self.fullname" . }}-{{ .Values.rbac.serviceAccount }}
      {{- end }}
      volumes:
        {{- if .Values.persistentVolume.pvcEnabled }}
        - name: {{ template "self.fullname" . }}-storage-volume
          persistentVolumeClaim:
            claimName: {{ template "self.fullname" . }}
        {{- end }}
        {{- if .Values.secret.externalSecretVolMountEnabled }}
        - name: {{ template "self.fullname" . }}-secret-volume
          secret:
            secretName: {{ .Values.secret.externalSecretName }}
        {{- end }}
        {{- if .Values.configmap.externalConfigMapVolMountEnabled }}
        - name: {{ template "self.fullname" . }}-config-volume
          configMap:
            name: {{ .Values.configmap.externalConfigMapName }}
        {{- end }}
        {{- if .Values.binconfigmap.externalConfigMapVolMountEnabled }}
        - name: {{ template "self.fullname" . }}-bin-volume
          configMap:
            name: {{ .Values.binconfigmap.externalConfigMapName }}
        {{- end }}
      imagePullSecrets:
        - name: {{ .Values.config.pullSecret }}
      {{- with .Values.resources }}
      resources:
{{ toYaml . | indent 8 }}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if or (.Values.persistentVolume.pvcEnabled) (.Values.dependentServices) }}
      initContainers:
      {{- if .Values.persistentVolume.pvcEnabled }}
      - name: volume-mount-chown
        image: busybox
        command: ["sh", "-c", "chown -R {{ .Values.persistentVolume.fsowner.userid }}:{{ .Values.persistentVolume.fsowner.groupid }} {{ $wso2AppHome }}/{{ .Values.persistentVolume.mountToSubPath }}"]
        volumeMounts:
        - name: {{ template "self.fullname" . }}-storage-volume
          mountPath: {{ $wso2AppHome }}/{{ .Values.persistentVolume.mountToSubPath }}
      {{- end }}
      {{- range $dependentService := .Values.dependentServices }} 
      - name: init-dependent-service-{{ $dependentService.name }}
        image: busybox
        command: ['sh', '-c', 'until nslookup {{ $releaseName }}-{{ $dependentService.name }}; do echo waiting for {{ $releaseName }}-{{ $dependentService.name }}; sleep {{ $dependentService.pauseTime }}; done;']
      {{- end }}
    {{- end }}